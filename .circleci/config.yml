version: 2.1

jobs:
  build:
    docker:
      - image: circleci/node:14
    steps:
      - checkout

      # Cache Node.js dependencies
      - restore_cache:
          keys:
            - v1-node-modules-{{ checksum "package-lock.json" }}
            - v1-node-modules-
      
      - run:
          name: Install Dependencies
          command: npm install
      
      # Save Node.js dependencies to the cache
      - save_cache:
          paths:
            - node_modules
          key: v1-node-modules-{{ checksum "package-lock.json" }}
      
      # Run tests (optional)
    

      # Build Docker image
      - setup_remote_docker:
          version: edge

      - run:
          name: Build Docker Image
          command: |
            docker build -t wpadmin2 .

      # Authenticate Docker with AWS ECR
      - run:
          name: Authenticate with AWS ECR
          command: |
            aws --version
            aws ecr get-login-password --region ap-south-1 | docker login --username AWS --password-stdin 767888781477.dkr.ecr.ap-south-1.amazonaws.com

      # Push Docker image to AWS ECR
      - run:
          name: Push Docker Image to ECR
          command: |
           docker tag wpadmin2:latest 767888781477.dkr.ecr.ap-south-1.amazonaws.com/wpadmin2:latest

  deploy:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout

      # Update ECS service to deploy the new image
      - run:
          name: Update ECS Service with new image
          command: |
            ecs-cli configure --cluster demo-cluster2 --region ap-south-1
            ecs-cli compose --file docker-compose.yml service up --cluster-config demo-cluster2 --ecs-params ecs-params.yml

workflows:
  version: 2
  build_and_deploy:
    jobs:
      - build
      - deploy:
          requires:
            - build
